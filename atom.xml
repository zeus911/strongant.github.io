<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>strongant的个人博客</title>
  <subtitle>一个正在成长的码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://baiwenhui.com/"/>
  <updated>2017-08-12T03:51:12.642Z</updated>
  <id>http://baiwenhui.com/</id>
  
  <author>
    <name>strongant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac上传图片至图床神器</title>
    <link href="http://baiwenhui.com/2017/08/12/Mac%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%87%B3%E5%9B%BE%E5%BA%8A%E7%A5%9E%E5%99%A8/"/>
    <id>http://baiwenhui.com/2017/08/12/Mac上传图片至图床神器/</id>
    <published>2017-08-12T03:47:00.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<h4 id="推荐一款Mac上上传图片到图床的神器：IPic"><a href="#推荐一款Mac上上传图片到图床的神器：IPic" class="headerlink" title="推荐一款Mac上上传图片到图床的神器：IPic"></a>推荐一款Mac上上传图片到图床的神器：IPic</h4><h5 id="具体的下载和使用方法可以戳这儿"><a href="#具体的下载和使用方法可以戳这儿" class="headerlink" title="具体的下载和使用方法可以戳这儿"></a>具体的下载和使用方法可以戳这儿</h5><p><a href="https://toolinbox.net/iPic/" target="_blank" rel="external">https://toolinbox.net/iPic/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;推荐一款Mac上上传图片到图床的神器：IPic&quot;&gt;&lt;a href=&quot;#推荐一款Mac上上传图片到图床的神器：IPic&quot; class=&quot;headerlink&quot; title=&quot;推荐一款Mac上上传图片到图床的神器：IPic&quot;&gt;&lt;/a&gt;推荐一款Mac上上传图片到图床的神
    
    </summary>
    
    
      <category term="图床" scheme="http://baiwenhui.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="图片" scheme="http://baiwenhui.com/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="工具" scheme="http://baiwenhui.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令记录</title>
    <link href="http://baiwenhui.com/2017/08/11/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>http://baiwenhui.com/2017/08/11/Git常用命令记录/</id>
    <published>2017-08-11T15:13:00.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git常用命令记录"><a href="#Git常用命令记录" class="headerlink" title="Git常用命令记录"></a>Git常用命令记录</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1figsf17eayj31h00yc44g.jpg" alt="GIT常用命令图片"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Git常用命令记录&quot;&gt;&lt;a href=&quot;#Git常用命令记录&quot; class=&quot;headerlink&quot; title=&quot;Git常用命令记录&quot;&gt;&lt;/a&gt;Git常用命令记录&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006
    
    </summary>
    
    
      <category term="git" scheme="http://baiwenhui.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用angular中的service和filter编写组件树</title>
    <link href="http://baiwenhui.com/2017/08/05/%E4%BD%BF%E7%94%A8angular%E4%B8%AD%E7%9A%84service%E5%92%8Cfilter%E7%BC%96%E5%86%99%E7%BB%84%E4%BB%B6%E6%A0%91/"/>
    <id>http://baiwenhui.com/2017/08/05/使用angular中的service和filter编写组件树/</id>
    <published>2017-08-05T08:49:00.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学习《AngularJS深度剖析与实践》总结</p>
<ul>
<li>在我们平时的开发中，需要对某些数据进行以树的形式进行展现，比如：权限角色、菜单、嵌套评论等。这个时候我们需要使用angular进行对数据抽象，构造我们自己的组件树：</li>
<li>例子：我们就拿主题树作为一个例子，然后一步一步去优雅的实现它:</li>
</ul>
</blockquote>
<ol>
<li>首先我们准备好angular的库文件，建立好相应的目录及文件，按照angular遵循的风格：约定优于配置。首先我们创建一个用于展示的目录，theme-tree<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir theme-tree &amp;&amp; cd $_</div></pre></td></tr></table></figure>
</li>
</ol>
<p>2.创建需要展示的html页面文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch index.html</div></pre></td></tr></table></figure></p>
<p>3.创建存放项目js文件的目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir js</div></pre></td></tr></table></figure></p>
<p>4.创建存放angular项目的controller目录、service目录和filter目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir controller &amp;&amp; mkdir service &amp;&amp; mkdir filter</div></pre></td></tr></table></figure></p>
<p>5.创建angular项目的入口文件，app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd js &amp;&amp; touch app.js</div></pre></td></tr></table></figure></p>
<p>6.目前先不考虑UI效果部分，主要以实现功能为主，我们使用bower来安装和管理相应的js第三方库文件，如果没有安装bower工具，可以借助npm进行安装-npm install -g bower ,在我们创建的theme-tree目录下，键入如下命令安装angular库的依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower install angular --save</div></pre></td></tr></table></figure></p>
<p>以上命令实行完毕后我们的目录结构如下：<br><img src="http://upload-images.jianshu.io/upload_images/1310396-c3be8338ba3a864d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录文件显示"></p>
<p>7.接下来我们开始编辑js/app.js入口文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;myApp&apos;, []);</div></pre></td></tr></table></figure></p>
<p>8.接下来我们开始编写控制器文件js/controller/index.client.controller.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;myApp&apos;).controller(&quot;ThreedTreeCtrl&quot;,function ThreedTreeCtrl(tree) &#123;</div><div class="line">        var vm = this;</div><div class="line">        vm.items = [&#123;</div><div class="line">                id: 1,</div><div class="line">                title: &quot;Java&quot;,</div><div class="line">                poster: &quot;Messi&quot;,</div><div class="line">                dateCreated: &quot;2012-02-19T00:00:00&quot;,</div><div class="line">                items: [&#123;</div><div class="line">                        id: 11,</div><div class="line">                        title: &apos;Spring&apos;,</div><div class="line">                        poster: &apos;John&apos;,</div><div class="line">                        dateCreated: &quot;2012-02-19T00:00:00&quot;,</div><div class="line">                        items: [</div><div class="line">                                &#123;</div><div class="line">                                        id: 111,</div><div class="line">                                        title: &apos;AOP&apos;,</div><div class="line">                                        poster: &apos;Mike&apos;,</div><div class="line">                                        dateCreated: &quot;2016-02-19T00:00:00&quot;,</div><div class="line">                                         items: [</div><div class="line">                                &#123;</div><div class="line">                                        id: 1111,</div><div class="line">                                        title: &apos;IOC&apos;,</div><div class="line">                                        poster: &apos;Jack&apos;]</div><div class="line">                                &#125;</div><div class="line">                        ]</div><div class="line">                &#125;, &#123;</div><div class="line"></div><div class="line">                                id: 2,</div><div class="line">                                title: &quot;SpringBoot&quot;,</div><div class="line">                                poster: &quot;Lucy&quot;,</div><div class="line">                                dateCreated: &quot;2011-02-19T00:00:00&quot;</div><div class="line">                        &#125;</div><div class="line">                ]</div><div class="line">        &#125;, &#123;</div><div class="line">                        id: 2,</div><div class="line">                        title: &quot;JavaScript&quot;,</div><div class="line">                        poster: &quot;Jack&quot;,</div><div class="line">                        dateCreated: &quot;2012-02-19T00:00:00&quot;,</div><div class="line">                &#125;</div><div class="line">        ];</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>以上内容很简单，构建了一个ThreedTreeCtrl控制器，里面嵌套了一些随意的数据，主要是为了模拟父子关系；</p>
<p>9.接下来我们编辑js/service/index.client.service.js文件，用于对数据进行附加相应的行为。思考一下，当我们有了这样一组数据后，我们要为它添加什么方法和属性，首先应该添加父节点是否折叠，此属性主要是为了在界面显示的时候展开或折叠子节点数据。当展开的时候我们使用“-”表示，折叠的时候我们使用”+”表示，当折叠时单击节点应该展开子节点，当展开的时候，单击子节点应该折叠父节点；将新增的属性和方法为了减小和原始数据冲突，并且这些数据通过$http或者$resource提交给服务器，它们所调用的angular.toJso()函数会忽略所有以$开头的属性，这样我们扩展的属性就不会被提交到服务端了。还有一个方便的是，当我们看到数据上有”$”开头的属性就是扩展的属性。接下来我们实现它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;myApp&apos;).service(&apos;tree&apos;,function Tree()&#123;</div><div class="line">    var self = this;</div><div class="line">    //为每一项节点添加属性和方法</div><div class="line">    var enhanceItem = function(item,childrenName)&#123;</div><div class="line">        item.$hasChildren = function()&#123;</div><div class="line">            var subItems = this[childrenName];</div><div class="line">            return angular.isArray(subItems) &amp;&amp; subItems.length;</div><div class="line">        &#125;;</div><div class="line">        item.$foldToggle = function()&#123;</div><div class="line">            this.$folded = !this.$folded;</div><div class="line">        &#125;;</div><div class="line">        item.$isFolded = function()&#123;</div><div class="line">            return this.$folded;</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //对传进来的数据进行强化</div><div class="line">    this.enhance = function(items,childrenName)&#123;</div><div class="line">        if(angular.isUndefined(childrenName))&#123;</div><div class="line">            childrenName = &quot;items&quot;;</div><div class="line">        &#125;</div><div class="line">        angular.forEach(items,function(item)&#123;</div><div class="line">            enhanceItem(item,childrenName);</div><div class="line">            //如果有子节点则递归处理</div><div class="line">            self.enhance(item[childrenName],childrenName);</div><div class="line">        &#125;);</div><div class="line">        console.log(items);</div><div class="line">        return items;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>10.这样我们完成了对数据进行强化，此时我们如果直接在controller调用service的enhance 方法，将服务端返回的json数据进行加强，为他们添加的相应的属性和方法，然后在页面进行展示调用就可以了，但是这样感觉比较脏，不干净，我们不在contrller直接调用service里面的enhance 方法，我们可以创建一个过滤器来对数据进行添加过滤的功能，接下来我们开始编辑filter/index.client.filter.js:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;myApp&apos;).filter(&apos;tree&apos;,function(tree)&#123;</div><div class="line">    return function(items,childrenName)&#123;</div><div class="line">        tree.enhance(items,childrenName);</div><div class="line">        return items;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>11.接下来编写html文件，开始对主题树进行展现并且引入相关文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">    &lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;ThreedTreeCtrl as vm&quot;&gt;</div><div class="line">        &lt;ul ng-if=&quot;vm.items&quot;&gt;</div><div class="line">            &lt;li ng-repeat=&quot;item1 in vm.items | tree&quot;&gt;</div><div class="line">                &lt;div ng-click=&quot;item1.$foldToggle()&quot;&gt;</div><div class="line">                    &lt;span ng-if=&quot;item1.$hasChildren()&quot;&gt;</div><div class="line">                    &lt;span ng-if=&quot;!item1.$isFolded()&quot;&gt;-&lt;/span&gt;</div><div class="line">                    &lt;span ng-if=&quot;item1.$isFolded()&quot;&gt;+&lt;/span&gt;</div><div class="line">                    &lt;/span&gt;</div><div class="line">                    &#123;&#123; item1.title &#125;&#125;</div><div class="line">                &lt;/div&gt;</div><div class="line"></div><div class="line">                &lt;ul ng-if=&quot;item1.$hasChildren() &amp;&amp; !item1.$isFolded()&quot;&gt;</div><div class="line">                    &lt;li ng-repeat=&quot;item2 in item1.items&quot;&gt;</div><div class="line">                        &lt;div ng-click=&quot;item2.$foldToggle()&quot;&gt;</div><div class="line">                            &lt;span ng-if=&quot;item2.$hasChildren()&quot;&gt;</div><div class="line">                    &lt;span ng-if=&quot;!item2.$isFolded()&quot;&gt;-&lt;/span&gt;</div><div class="line">                            &lt;span ng-if=&quot;item2.$isFolded()&quot;&gt;+&lt;/span&gt;</div><div class="line">                            &lt;/span&gt;</div><div class="line">                            &#123;&#123; item2.title &#125;&#125;</div><div class="line">                        &lt;/div&gt;</div><div class="line"></div><div class="line">                        &lt;ul ng-if=&quot;item2.$hasChildren() &amp;&amp; !item2.$isFolded()&quot;&gt;</div><div class="line">                            &lt;li ng-repeat=&quot;item3 in item2.items&quot;&gt;</div><div class="line">                                &#123;&#123; item3.title &#125;&#125;</div><div class="line">                            &lt;/li&gt;</div><div class="line">                        &lt;/ul&gt;</div><div class="line">                    &lt;/li&gt;</div><div class="line">                &lt;/ul&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line"></div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;script src=&quot;bower_components/angular/angular.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;</div><div class="line">     &lt;script src=&quot;js/controller/index.client.controller.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;js/service/index.client.service.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;js/filters/index.client.filter.js&quot;&gt;&lt;/script&gt;</div><div class="line">    </div><div class="line">     </div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>此时我们便完成了对主题树功能的实现，在index.html文件中，我们只展示了两层嵌套关系以作为示例，根据自己的业务场景进行扩展。<br>以上实现还不够优雅，等待以后需要将主题递归树封装为指令，最后附上github地址:<br><a href="https://github.com/strongant/angularjs" target="_blank" rel="external">https://github.com/strongant/angularjs</a><br>源码位于此仓库下的angular-tree目录，欢迎提出issue。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习《AngularJS深度剖析与实践》总结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在我们平时的开发中，需要对某些数据进行以树的形式进行展现，比如：权限角色、菜单、嵌套评论等。这个时候我们需要使用angular进行对数据抽象，构造我们自己的组件树：&lt;/li&gt;

    
    </summary>
    
    
      <category term="angularjs" scheme="http://baiwenhui.com/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>监听chrome extension popup页面消失</title>
    <link href="http://baiwenhui.com/2017/08/05/%E7%9B%91%E5%90%ACchrome-extension-popup%E9%A1%B5%E9%9D%A2%E6%B6%88%E5%A4%B1/"/>
    <id>http://baiwenhui.com/2017/08/05/监听chrome-extension-popup页面消失/</id>
    <published>2017-08-05T08:46:00.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li>当用户不小心点击了鼠标或者离开了扩展的popup页面，此时需要对一些数据进行清空或者删除一些不必要的数据.</li>
</ul>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul>
<li>然而chrome 扩展官方并没有对popup或者browserAction提供相关页面消失时的监听事件</li>
</ul>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul>
<li>通过不断的查找资料和查阅chrome扩展开发文档，我们可以使用消息通信连接的方式解决了这个问题<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤:"></a>具体步骤:</h3></li>
<li><p>首先在你需要监听页面消失事件的js文件中与background建立连接，相关代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//这里主要是为了与background建立连接，当页面关闭的时候连接就会断开，此时background中你注册的连接关闭函数此时会执行，因为background环境一直存在，除非你关闭了电脑</div><div class="line"> var port = chrome.runtime.connect();</div></pre></td></tr></table></figure>
</li>
<li><p>在background环境注册断开连接时需要处理的方法，相关代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  chrome.runtime.onConnect.addListener(function (externalPort) &#123;</div><div class="line">        externalPort.onDisconnect.addListener(function() &#123;</div><div class="line">        var ignoreError = chrome.runtime.lastError;</div><div class="line">        console.log(&quot;onDisconnect&quot;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>通过以上的方式便实现了类似对popup页面消失时做一些事情的需求。感谢StackOverFlow，神一样的解决问题社区，致敬！</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当用户不小心点击了鼠标或者离开了扩展的popup页面，此时需要对一些数据进行清空或者删除一些不必要的数据.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="chrome扩展" scheme="http://baiwenhui.com/tags/chrome%E6%89%A9%E5%B1%95/"/>
    
      <category term="JavaScript" scheme="http://baiwenhui.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>上班路上的琐事</title>
    <link href="http://baiwenhui.com/2017/08/05/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%85%A8/"/>
    <id>http://baiwenhui.com/2017/08/05/生活感慨/</id>
    <published>2017-08-05T06:59:00.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件起因"><a href="#事件起因" class="headerlink" title="事件起因"></a>事件起因</h3><p>  骑着电动车上班也有4个月了，总体感觉还是很不错的！由之前坐地铁上班花费1个半小时减少到现在的半个小时，还是很不错的一笔投资！其实后悔电瓶车买的有点迟了，如果早点买的话起码可以在出行方面带来很多方便，虽然现在有很多的共享单车可以骑，但是对于上海这么大的地方和上班距离遥远的情况，对于骑自行车来上班肯定是来不及的，速度也跟不上，根本无法满足自己的需求！可就在昨天下午2017年8月5号18点20分左右，当我插上电动车钥匙，死活就是启动不了电瓶车，而且电瓶车很明显没有一丁点儿电了，大灯不亮，喇叭不响，心里一下难过了，到底什么鬼导致这个问题的发生呢？然后想了想，我靠，中午的时候貌似下很大的雨，不会是雨漏到电瓶或者控制器里面，导致短路了吧？这个只是当时的猜测，后面接着开始用百度进行搜索一下，看网上有没有类似的网友遇到此问题，网上扫了一圈，基本上都说是可能是电瓶进水了，把电瓶晾干就可以骑了，其实当时想给卖车的师傅打电话的，又相信了网上的答案，于是便将车放到车棚里面坐地铁回家了，晚上可是要看《战狼2》的，不然时间来不及了，于是便放下电动车，匆忙往电影院赶！</p>
<h3 id="事件经过"><a href="#事件经过" class="headerlink" title="事件经过"></a>事件经过</h3><p>  晚上看完电影，天气湿热湿热，难受至极，晚上浑浑噩噩的睡了一晚上。大清早9点多就起来了，起来便开始准备去公司看看电瓶车是不是像网上说的那样，等到电瓶晾干了，就可以骑了！于是乎开始骑单车、等公交、坐公交、等地铁、坐地铁，从出发到到达公司，大概花费了我2个小时，在这里我不得不吐槽交通问题，其实住的地方离公司只有20公里，有一次我起迟了害怕迟到，就打了个车到公司，花了40块钱。但是花费时间让我很惊讶，只用了10分钟，我就纳闷了，为什么这么快呢？原来是因为坐地铁比较绕，而且也没有直达的公交，如果坐公交的话也是特别绕，所以就浪费了不应该浪费的2个小时时间。这一点可能是因为个人住的地方偏远原因吧，不过我想很多人应该也有类似的愤怒，明明不是很远，却要绕很多路花很多时间才能到目的地。抱怨没用，只能自己想办法解决！到了公司之后去找到电瓶车，幸亏公司的安保措施做得不错，车子没有被偷，谢天谢地！当我插上钥匙，和昨天下午一个样，还是没有电，顿时想：糟糕，肯定是电瓶进水太严重，导致车子彻底没电了，这时候我想打电话找个修车师傅帮我看看，可卖车的地方离公司太远了，就想着要不要找个距离我比较近的修车师傅过来看看，又顾虑这是新车，如果让别人拆开修，人家不给我保修了怎么办，买下车骑了也没有多长时间，不划算！还是打电话问一下原卖车的师傅，我把情况给人家说了一下：昨天中午下了会大雨，车子没有用雨衣盖住，昨天下班后钥匙插上之后，启动不了，纯粹没电！然后又经验的师傅说了下：你检查一下座子下面那个开关是不是把电瓶的电源关闭了。于是我便按照他说的，打开后座，把开关切换了一些，然后用钥匙插上，发现奇迹产生了，电动车一切正常，心里窃喜，不用修了，感谢有经验的老司机！</p>
<h3 id="又出波折"><a href="#又出波折" class="headerlink" title="又出波折"></a>又出波折</h3><p>  由于又可以正常骑行了，不用挤地铁，一切恢复正常，心里比较窃喜，骑行的过程中一不小心就撞到了马路边的一个栏杆桩上面，这一撞直接把电瓶车的单撑撞断了，于是骑到卖车的地方花了40块钱焊接了一下，唉，这半天的时间又浪费过去了！无奈！</p>
<h3 id="事件总结"><a href="#事件总结" class="headerlink" title="事件总结"></a>事件总结</h3><p>  在平时用车的时候，应该特别小心，注意安全！最后分享一个CCTV7的对电动车电池修复技术的介绍视频，本人觉得讲解的很好，很细致！<a href="http://tv.cntv.cn/video/C10391/258219f0a78b491c452527b41bb3088c" target="_blank" rel="external">http://tv.cntv.cn/video/C10391/258219f0a78b491c452527b41bb3088c</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事件起因&quot;&gt;&lt;a href=&quot;#事件起因&quot; class=&quot;headerlink&quot; title=&quot;事件起因&quot;&gt;&lt;/a&gt;事件起因&lt;/h3&gt;&lt;p&gt;  骑着电动车上班也有4个月了，总体感觉还是很不错的！由之前坐地铁上班花费1个半小时减少到现在的半个小时，还是很不错的一笔投
    
    </summary>
    
    
      <category term="随笔" scheme="http://baiwenhui.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Grails中一个日期差引起的思考</title>
    <link href="http://baiwenhui.com/2017/08/02/Grails%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A5%E6%9C%9F%E5%B7%AE%E5%BC%95%E8%B5%B7%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://baiwenhui.com/2017/08/02/Grails中一个日期差引起的思考/</id>
    <published>2017-08-02T14:02:00.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求如下"><a href="#需求如下" class="headerlink" title="需求如下"></a>需求如下</h3><p><strong> 对某表中的数据进行查询限制，当根据某个条件进行查询表记录时，如果该记录的查询时间与当前服务器时间相差大于一周，则允许查询操作，否则不允许重复查询操作。 </strong></p>
<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>根据当前需求进行编码，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class ExampleController &#123;</div><div class="line">    def test() &#123;</div><div class="line">        ...</div><div class="line">        def obj = XXX.findByName(&apos;xxx&apos;)</div><div class="line">        def limitDays = 7</div><div class="line">        if(obj &amp;&amp; daysBetween(obj.queryTime,new Date())&lt;=7)&#123;</div><div class="line">                            render([code: 10101, msg: &quot;查询失败，7天内不允许重复查询&quot;, data: []] as grails.converters.JSON)</div><div class="line">                            return</div><div class="line"> </div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    //TODO: 将此处判断移动至service或者util类</div><div class="line">    static def daysBetween(def startDate, def endDate) &#123;</div><div class="line">        use(groovy.time.TimeCategory) &#123;</div><div class="line">            def duration = endDate - startDate</div><div class="line">            return duration.days</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>出现bug:<br><strong>本地测试程序可以正常执行，但是发现在生产环境下并没有正常执行</strong></p>
<p>错误解决：<br><strong>以为是groovy.time.TimeCategory原生类有bug，将比较日期间隔天数的方法修改为如下:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//TODO: 将此处判断移动至service或者util类</div><div class="line">static boolean keep7Days(endDate)&#123;</div><div class="line">     return (System.currentTimeMillis()-endDate.getTime())&lt;3600*1000*24*7</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改结果：<br>问题依然存在。</p>
<p>进行分析：</p>
<p><strong> 当我们从某张表中根据某个条件查询一条记录，如果该条件对一个多条重复记录，那数据库将按照表中的记录插入顺序返回最初插入的一条记录。因此，当根据某条件进行匹配查询时，应该按照id降序排列后取得第一条即可。 </strong></p>
<p>解决办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">def obj = XXX.find(&quot;from XXX as b where b.xxx=:xxx order by b.id desc&quot;,[xxx:xxx])</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>通过以上方式，我们便可以得到最后插入的记录，此时再使用时间差进行判断就不会出现匹配不正确问题。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>当项目中遇到bug时应该找到问题的根源再进行解决。在测试的过程中数据应该保持和生产环境数据一致！</p>
<h4 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h4><p>推荐两个不错的播客平台：</p>
<p> <a href="https://ipn.li/kernelpanic/" target="_blank" rel="external">内核恐慌</a><br> <a href="http://banlan.show/bitvoice" target="_blank" rel="external">比特新声</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求如下&quot;&gt;&lt;a href=&quot;#需求如下&quot; class=&quot;headerlink&quot; title=&quot;需求如下&quot;&gt;&lt;/a&gt;需求如下&lt;/h3&gt;&lt;p&gt;&lt;strong&gt; 对某表中的数据进行查询限制，当根据某个条件进行查询表记录时，如果该记录的查询时间与当前服务器时间相差大于一
    
    </summary>
    
    
      <category term="groovy" scheme="http://baiwenhui.com/tags/groovy/"/>
    
      <category term="grails" scheme="http://baiwenhui.com/tags/grails/"/>
    
      <category term="gorm" scheme="http://baiwenhui.com/tags/gorm/"/>
    
  </entry>
  
  <entry>
    <title>Mac通过brew安装redis</title>
    <link href="http://baiwenhui.com/2017/07/26/Mac%E9%80%9A%E8%BF%87brew%E5%AE%89%E8%A3%85redis/"/>
    <id>http://baiwenhui.com/2017/07/26/Mac通过brew安装redis/</id>
    <published>2017-07-26T13:41:00.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MacOS下通过brew安装redis"><a href="#MacOS下通过brew安装redis" class="headerlink" title="MacOS下通过brew安装redis"></a>MacOS下通过brew安装redis</h2><h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis:"></a>安装redis:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install redis</div></pre></td></tr></table></figure>
<p>安装后的地址为:/usr/local/Cellar/redis/3.2.9</p>
<h3 id="链接redis的launch开机启动配置文件"><a href="#链接redis的launch开机启动配置文件" class="headerlink" title="链接redis的launch开机启动配置文件"></a>链接redis的launch开机启动配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents</div></pre></td></tr></table></figure>
<h3 id="使用launchctl启动redis，每次开机启动"><a href="#使用launchctl启动redis，每次开机启动" class="headerlink" title="使用launchctl启动redis，每次开机启动"></a>使用launchctl启动redis，每次开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</div></pre></td></tr></table></figure>
<h3 id="通过redis的配置文件进行启动"><a href="#通过redis的配置文件进行启动" class="headerlink" title="通过redis的配置文件进行启动"></a>通过redis的配置文件进行启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server /usr/local/etc/redis.conf</div></pre></td></tr></table></figure>
<h3 id="停止开机启动redis"><a href="#停止开机启动redis" class="headerlink" title="停止开机启动redis"></a>停止开机启动redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</div></pre></td></tr></table></figure>
<h3 id="安装后的redis默认配置文件地址："><a href="#安装后的redis默认配置文件地址：" class="headerlink" title="安装后的redis默认配置文件地址："></a>安装后的redis默认配置文件地址：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/etc/redis.conf</div></pre></td></tr></table></figure>
<h3 id="卸载redis"><a href="#卸载redis" class="headerlink" title="卸载redis"></a>卸载redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew uninstall redis</div><div class="line">rm ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</div></pre></td></tr></table></figure>
<h3 id="获取redis的安装信息"><a href="#获取redis的安装信息" class="headerlink" title="获取redis的安装信息"></a>获取redis的安装信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew info redis</div></pre></td></tr></table></figure>
<h3 id="测试redis是否启动"><a href="#测试redis是否启动" class="headerlink" title="测试redis是否启动"></a>测试redis是否启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli ping</div></pre></td></tr></table></figure>
<p>如果redis返回“PONG”，那么说明连接成功</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MacOS下通过brew安装redis&quot;&gt;&lt;a href=&quot;#MacOS下通过brew安装redis&quot; class=&quot;headerlink&quot; title=&quot;MacOS下通过brew安装redis&quot;&gt;&lt;/a&gt;MacOS下通过brew安装redis&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
    
      <category term="mac" scheme="http://baiwenhui.com/tags/mac/"/>
    
      <category term="redis" scheme="http://baiwenhui.com/tags/redis/"/>
    
      <category term="brew" scheme="http://baiwenhui.com/tags/brew/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Java8环境</title>
    <link href="http://baiwenhui.com/2017/07/26/Ubuntu%E5%AE%89%E8%A3%85Java8%E7%8E%AF%E5%A2%83/"/>
    <id>http://baiwenhui.com/2017/07/26/Ubuntu安装Java8环境/</id>
    <published>2017-07-26T13:32:00.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu-系统安装Java8-JDK"><a href="#Ubuntu-系统安装Java8-JDK" class="headerlink" title="Ubuntu 系统安装Java8 JDK"></a>Ubuntu 系统安装Java8 JDK</h2><p>1.添加ppa<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:webupd8team/java</div></pre></td></tr></table></figure></p>
<p>2.更新系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure></p>
<p>3.开始安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install oracle-java8-installer -y</div></pre></td></tr></table></figure></p>
<p>4.验证是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure></p>
<p>5.安装脚本gist地址(执行脚本时记得回车继续，其中弹出确认安装提示选择是即可，脚本执行完毕后就已经成功安装Java8了，安装大约得等待一段时间，请耐心等待！):<br><a href="https://gist.github.com/strongant/740f58dd6f116a4ff4d156805340bb95" target="_blank" rel="external">https://gist.github.com/strongant/740f58dd6f116a4ff4d156805340bb95</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ubuntu-系统安装Java8-JDK&quot;&gt;&lt;a href=&quot;#Ubuntu-系统安装Java8-JDK&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 系统安装Java8 JDK&quot;&gt;&lt;/a&gt;Ubuntu 系统安装Java8 JDK&lt;/h2&gt;&lt;
    
    </summary>
    
    
      <category term="jdk" scheme="http://baiwenhui.com/tags/jdk/"/>
    
      <category term="java8" scheme="http://baiwenhui.com/tags/java8/"/>
    
      <category term="sh" scheme="http://baiwenhui.com/tags/sh/"/>
    
  </entry>
  
  <entry>
    <title>终端录制神器-showterm</title>
    <link href="http://baiwenhui.com/2017/07/26/%E7%BB%88%E7%AB%AF%E5%BD%95%E5%88%B6%E7%A5%9E%E5%99%A8/"/>
    <id>http://baiwenhui.com/2017/07/26/终端录制神器/</id>
    <published>2017-07-26T12:21:00.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用showterm对终端脚本进行录制"><a href="#使用showterm对终端脚本进行录制" class="headerlink" title="使用showterm对终端脚本进行录制"></a>使用showterm对终端脚本进行录制</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>如果是Mac用户，直接使用如下命令即可安装(默认情况下，Mac OS X 系统已经安装好 Ruby):</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install showterm</div></pre></td></tr></table></figure>
<p>如果是Linux用户，可使用如下方式安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl showterm.io/showterm &gt; /usr/local/bin/showterm</div><div class="line">chmod +x /usr/local/bin/showterm</div></pre></td></tr></table></figure>
<ol>
<li><p>安装完毕之后便可以对终端进行录制了，录制后的结果是一个视频文件，并且为你自动生成一个可以公开访问的地址，非常方便；</p>
</li>
<li><p>验证是否安装成功：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">showterm -h</div></pre></td></tr></table></figure>
<p>如果显示此工具使用方法，则说明安装成功！</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol>
<li><p>打开终端，输入showterm，此时showterm会提示您正在进行脚本视频录制，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">showterm recording. (Exit shell when done.)</div></pre></td></tr></table></figure>
</li>
<li><p>当你脚本录入完毕后，此时便可以使用<code>exit</code>命令结束本次录制。此时你会得到以下类似提示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">showterm recording finished.</div><div class="line">Uploading...</div><div class="line">http://showterm.io/44c650714d8a45b265064</div></pre></td></tr></table></figure>
</li>
<li><p>此时打开<a href="http://showterm.io/44c650714d8a45b265064" target="_blank" rel="external">http://showterm.io/44c650714d8a45b265064</a> 链接便可以对刚才的脚本操作进行显示！</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用showterm对终端脚本进行录制&quot;&gt;&lt;a href=&quot;#使用showterm对终端脚本进行录制&quot; class=&quot;headerlink&quot; title=&quot;使用showterm对终端脚本进行录制&quot;&gt;&lt;/a&gt;使用showterm对终端脚本进行录制&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
    
      <category term="工具" scheme="http://baiwenhui.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="终端" scheme="http://baiwenhui.com/tags/%E7%BB%88%E7%AB%AF/"/>
    
      <category term="showterm" scheme="http://baiwenhui.com/tags/showterm/"/>
    
  </entry>
  
  <entry>
    <title>IDEA Mac下快捷键奇淫技巧</title>
    <link href="http://baiwenhui.com/2017/07/22/IDEA-Mac%E4%B8%8B%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    <id>http://baiwenhui.com/2017/07/22/IDEA-Mac下快捷键奇淫技巧/</id>
    <published>2017-07-22T13:59:00.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>为你的ide设置背景图片；<br>只需要双击enter键，然后输入<em>set back</em>， 找到<em>Set Background Image</em> 选择你想要添加的背景图片即可。如果不需要设置图片，再次打开单击<em>clear</em>按钮即可清除。</li>
<li>若果你想展示自己点击的按钮快捷键，可以安装<em>Presentation Assistant</em>即可，安装完之后需要重启。</li>
<li>如果你想快速跳到某一个类的某一行，那么你可以使用<em>Command+O</em>,然后键入你想要跳转的类名称，然后输入冒号加行号；</li>
<li>如果你想看到你进入这个类中总共有哪些方法，你可以使用<em>Command+7</em>，此时便可以显示这个类中的所有方法；</li>
<li>如果你想找到某个类中的某个字段，你可以使用<em>Command+Option+O</em>,然后通过”/id”的方式，就可以找到所有包含id属性的类；</li>
<li>如果你想查看某个类中的变量或者方法在哪儿使用，直接使用<em>Command+B</em>即可；</li>
<li>如果你想查看某个变量的引用定义详情，则可以选中这个变量，然后使用<em>Command+Y</em>；</li>
<li>如果你想扩展左边项目结构窗口的大小，则可以使用<em>Command+Shift+&gt;(右方向键)</em>；</li>
<li>如果你想对编辑器某些窗口进行显示和隐藏，则可以双击Shift键，然后输入”#editor “,则可以对当前编辑器进行一些快速设置；</li>
<li>如果你想在idea中快速测试rest服务，则可以双击<em>Shift</em>然后输入<em>test rest</em>，找到最后一项打开<em>rest test client</em>便可以对服务进行测试调用；</li>
<li>如果你想双击<em>Shift</em>后，键入<em>ws</em>便可以打开<em>test restful client tool</em>，可以在keymap设置中输入<em>test rest</em>，找到<em>Tools–Test Restful Webservice</em>，然后选中右键选择<em>Abbreviation</em>设置<em>ws</em>，点击确定，然后双击<em>Shift</em>，输入<em>ws</em>，这时候第一项就是这个工具，此时便可以快速进入<em>test restful client tool</em>工具窗口；</li>
<li>如果你想对某个类进行全屏编辑，则可以使用<em>Command+Shift+F12</em>；</li>
<li>如果想快速打开项目结构视图，则可以使用<em>Command+1</em>；</li>
<li>如果你想对代码给别人展示或者review代码的时候，想放大某个类，则可以在<em>view</em>视图下选择：<em>Enter Presenttion Mode</em>即可，当然你也可以设置快捷键进行绑定，这个功能特别有用,比如我设置的是<em>Command+Shift+S</em>，这样当需要对某个文件进行展示时，直接按快捷键即可，在<em>Presenttion Mode</em>窗口中，我们可以使用<em>Command+E</em>显示最近浏览的文件，可以快速切换展示；</li>
<li>编辑器垂直分割和水平分割可以在菜单来<em>Window</em>下的<em>edit tab</em>中找到并绑定对应的快捷键；</li>
<li>当选择一行或者某个列时，使用<em>option</em>+上下方向键，不要使用鼠标勾选的方式；</li>
<li>如果你使用了两次以上剪贴操作，你想查看前几次的剪贴内容，则可以使用<em>Commad+Shift+V</em>,此时便可以找到前几次的剪贴记录；</li>
<li>如果你选择了某一行，想向上下选取，则使用<em>option</em>+上下方向键后，可以再使用<em>shift+option</em>+上下方向键；</li>
<li>当你需要对代码样式进行一些改变时，则可以选中代码片段 然后使用<em>option+Enter</em>；</li>
<li>如果你想在某个包下面建立一个类，你可以使用<em>Command+上方向键</em>激活导航bar，然后选择相应的目录，然后使用<em>Command+N</em>,新建你需要新建的类型即可，不要使用鼠标选择File新建，这样会影响效率；</li>
<li>如果不想在view中显示navbar，则可以设置navbar隐藏，方法：双击<em>shift</em>，输入<em>nav</em>，找到<em>view navigation bar</em> 选择off，然后使用<em>Command</em>+向上方向键便可以激活navbar；</li>
<li>如果你想使用BufferReader读取一个文件，此时你键入<code>BufferReader bf = new</code>的时候可以使用<em>shift+option+space</em>智能导入其派生类，由于 <em>shift+option+space</em>快键键可能会和输入法切换会有冲突，我设置成了<em>shift+option+command+space</em>；</li>
<li>如果你想在idea中引入包或者包裹异常，则可以使用<em>option+Enter</em>；</li>
<li>如果你想要对某个变量进行NPE验证，那么只需要使用这个变量名打”.”然后输入<em>not</em>，这时候选择相应的代码模板即可；</li>
<li>如果你想在代码的末尾添加分号，不要移动光标添加，直接使用<em>shift+command+回车</em>即可；</li>
<li>如果你想手写一个简单的JSON，可能需要使用转义字符进行转义双引号，此时你可以在字符串中使用<em>option</em>+回车选择<em>Inject language reference</em>选择JSON，然后再次使用<em>option+回车键</em>，选择<em>Edit Json Fragement</em>即可，此时你便可以在JSON 窗口中按照正常的方式编写JSON字符串了，IDE会自动帮你添加转义字符；同样的方式我们可以选择<em>Regex</em>，对正则进行编写，并且可以帮我们进行对正则校验，使用方法和JSON 输入的方式类似；</li>
<li>如果需要多行选中，则可以使用<em>option+shift+鼠标点击</em> 即可，或者可以使用<em>control+G</em>,然后继续选择你需要多行同时编辑的行，如果选择的行数多了，可以使用<em>control+shift+g</em>进行减少选中；</li>
<li>如果需要对选中的变量或者代码片段进行重构，则可以使用<em>control+T</em>；</li>
<li>对bool参数值进行转换，则可以对定义的bool变量选中然后使用<em>control+T</em>，输入<em>invert</em>，找到<em>invert boolean</em>，便可以对变量的值进行反转；</li>
<li>如果想对项目进行版本控制管理，使用<em>Command+K</em>或者使用<em>Ctrl+V</em>；</li>
<li>使用<em>control+tab</em>可以进行对不同的文件进行选择显示打开；</li>
<li>如果你想查看你目前使用快捷键的情况，则可以在idea的<em>help</em>菜单找到<em>Poductivity Guide</em>查看；<br><strong>注意：以上快捷键主要是Mac系统下的操作，如果你使用的是非Mac系统，那么你只需要安装Presentation Assistant便可以显示Linux和Windows上的快捷键</strong><br>如果想深入学习，可以参考该视频链接：<br><a href="https://www.youtube.com/watch?v=M2eL5YuqecQ&amp;list=PLQ176FUIyIUYUuSwE--flZWw2hfI21SjF&amp;index=2" target="_blank" rel="external">https://www.youtube.com/watch?v=M2eL5YuqecQ&amp;list=PLQ176FUIyIUYUuSwE--flZWw2hfI21SjF&amp;index=2</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;为你的ide设置背景图片；&lt;br&gt;只需要双击enter键，然后输入&lt;em&gt;set back&lt;/em&gt;， 找到&lt;em&gt;Set Background Image&lt;/em&gt; 选择你想要添加的背景图片即可。如果不需要设置图片，再次打开单击&lt;em&gt;clear&lt;/em&gt;按钮
    
    </summary>
    
    
      <category term="IDEA,Mac快捷键" scheme="http://baiwenhui.com/tags/IDEA-Mac%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>使用springdata操作es出错org.elasticsearch.client.transport.NoNodeAvailableException</title>
    <link href="http://baiwenhui.com/2017/07/21/%E4%BD%BF%E7%94%A8springdata%E6%93%8D%E4%BD%9Ces%E5%87%BA%E9%94%99org-elasticsearch-client-transport-NoNodeAvailableException/"/>
    <id>http://baiwenhui.com/2017/07/21/使用springdata操作es出错org-elasticsearch-client-transport-NoNodeAvailableException/</id>
    <published>2017-07-21T01:48:10.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<p>  之前的项目中使用的是http-client操作es，比较轻量级。目前为了学习下springdata，使用Java API 的方式来操作ES，但是在引入SpringData的es模块依赖后，操作es并未成功，出现以下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;]</div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong>如果你下载elasticsearch的压缩包安装的话，可能不会出现该问题！因为es默认的配置文件cluster.name是elasticsearch。但是奇葩的是使用brew安装es之后，默认的elasticsearch.yml的配置项成了这样：cluster.name: elasticsearch_bwh，就是这个原因导致了这个问题的产生，项目启动后控制台一直抛这个错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transport#-1&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125; not part of the cluster Cluster [Assassin], ignoring...</div></pre></td></tr></table></figure></p>
<p>当执行添加操作时，提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;]</div></pre></td></tr></table></figure></p>
<p>最后需要注意的是，如果你修改了es默认的集群名称，则需要在src/main/resources/application.properties配置文件中进行指定：</p>
<p>spring.data.elasticsearch.clusterName=elasticsearch_bwh<br>通过源码org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties可以看到，默认的<br>clusterName为elasticsearch。</p>
<p>希望可以帮助遇到此类问题的同学。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  之前的项目中使用的是http-client操作es，比较轻量级。目前为了学习下springdata，使用Java API 的方式来操作ES，但是在引入SpringData的es模块依赖后，操作es并未成功，出现以下错误：&lt;br&gt;&lt;figure class=&quot;highli
    
    </summary>
    
      <category term="SpringData" scheme="http://baiwenhui.com/categories/SpringData/"/>
    
    
      <category term="SpringData" scheme="http://baiwenhui.com/tags/SpringData/"/>
    
      <category term="Elasticsearch" scheme="http://baiwenhui.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>hexo将多说替换为畅言</title>
    <link href="http://baiwenhui.com/2017/05/30/hexo%E5%B0%86%E5%A4%9A%E8%AF%B4%E6%9B%BF%E6%8D%A2%E4%B8%BA%E7%95%85%E8%A8%80/"/>
    <id>http://baiwenhui.com/2017/05/30/hexo将多说替换为畅言/</id>
    <published>2017-05-30T02:46:11.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 由于多说团队在2017年6月1号停止了对多说的运营，因此需要将博客中使用的多说替换为畅言。 </strong></p>
<h3 id="具体替换办法如下："><a href="#具体替换办法如下：" class="headerlink" title="具体替换办法如下："></a>具体替换办法如下：</h3><ol>
<li>如果你没有畅言的账号，则首先去畅言的官网进行注册账号：<br>畅言网址: <a href="http://changyan.kuaizhan.com/" target="_blank" rel="external">http://changyan.kuaizhan.com/</a></li>
</ol>
<p><img src="/images/reg_changyan.png" alt=""></p>
<ol>
<li>如果你已经注册过畅言的账号了，那么请直接登录即可；</li>
<li>注册登录成功之后，点击进入后台，如图,可以看到已经有APP ID和APP KEY，这两个字符串，等会在配置的时候需要：</li>
</ol>
<p><img src="/images/login-changyan.png" alt=""></p>
<ol>
<li>由于我使用的是hexo的Yilia主题，这里以Yilia主题为主，进行下面的配置，其他主题类似。<br>在畅言后台找到<strong> 安装畅言 </strong> 点击展开之后，点击 <strong> 通用代码安装 </strong>，然后点击右边的复制代码，如图：</li>
</ol>
<p><img src="/images/copy-config.png" alt=""></p>
<ol>
<li><p>然后编辑你hexo目录下的themes/yilia/layout/_partial/post/duoshuo.ejs文件，将duoshuo.ejs中原来的内容全部删除，使用刚才拷贝的代码替换，替换后的样例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 畅言评论框 start --&gt;</div><div class="line">&lt;div id=&quot;SOHUCS&quot; sid=&quot;&lt;%=title %&gt;&quot; style=&quot;padding: 0px 30px 0px 46px;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;!-- 畅言评论框 end --&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt; </div><div class="line">(function()&#123; </div><div class="line">var appid = &apos;你的appid&apos;; </div><div class="line">var conf = &apos;你的app key&apos;; </div><div class="line">var width = window.innerWidth || document.documentElement.clientWidth; </div><div class="line">if (width &lt; 960) &#123; </div><div class="line">window.document.write(&apos;&lt;script id=&quot;changyan_mobile_js&quot; charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=&apos; + appid + &apos;&amp;conf=&apos; + conf + &apos;&quot;&gt;&lt;\/script&gt;&apos;); &#125; else &#123; var loadJs=function(d,a)&#123;var c=document.getElementsByTagName(&quot;head&quot;)[0]||document.head||document.documentElement;var b=document.createElement(&quot;script&quot;);b.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);b.setAttribute(&quot;charset&quot;,&quot;UTF-8&quot;);b.setAttribute(&quot;src&quot;,d);if(typeof a===&quot;function&quot;)&#123;if(window.attachEvent)&#123;b.onreadystatechange=function()&#123;var e=b.readyState;if(e===&quot;loaded&quot;||e===&quot;complete&quot;)&#123;b.onreadystatechange=null;a()&#125;&#125;&#125;else&#123;b.onload=a&#125;&#125;c.appendChild(b)&#125;;loadJs(&quot;https://changyan.sohu.com/upload/changyan.js&quot;,function()&#123;window.changyan.api.config(&#123;appid:appid,conf:conf&#125;)&#125;); &#125; &#125;)(); &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>然后就可以使用畅言了</p>
</li>
<li>由于我的域名已经备案，没有遇到网上说的不能正常加载畅言的方式，如果你的域名没有备案，具体Hacker方法，请参考：<a href="http://ev1l.cn/2017/05/13/changyancrack/" target="_blank" rel="external">http://ev1l.cn/2017/05/13/changyancrack/</a></li>
</ol>
<p><strong> 注意： </strong> 如果你在配置中还有其他问题，欢迎打赏提问，我收到之后会快速帮你解决！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 由于多说团队在2017年6月1号停止了对多说的运营，因此需要将博客中使用的多说替换为畅言。 &lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;具体替换办法如下：&quot;&gt;&lt;a href=&quot;#具体替换办法如下：&quot; class=&quot;headerlink&quot; title=&quot;具体
    
    </summary>
    
      <category term="Tools" scheme="http://baiwenhui.com/categories/Tools/"/>
    
    
      <category term="Tools" scheme="http://baiwenhui.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>递归的执行原理浅析</title>
    <link href="http://baiwenhui.com/2017/05/29/%E9%80%92%E5%BD%92%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://baiwenhui.com/2017/05/29/递归原理解析/</id>
    <published>2017-05-29T15:48:17.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>首先使用递归输出经典的阶乘，描述如下：</li>
</ol>
<ul>
<li>1! =1</li>
<li>2! = 2</li>
<li>3! = 6<br>…</li>
</ul>
<p>接下来使用常规的递归方式实现（Java），则可以得到以下程序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Java普通递归实现阶乘</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> n 传递的大于0的正整数</div><div class="line">     * <span class="doctag">@return</span> 该数字的阶乘    如：传递3 则计算 1 * 2 * 3 =  6</div><div class="line">     * 递归的核心思想自我理解： 先入栈计算直到递归终止   然后初栈 对每个栈中的值进行计算  最后得到结果</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><center><img src="/images/Java递归调用示意图.png" alt=""></center></p>
<p><center>递归调用示意图</center><br>此递归的计算原理主要是先申请栈幁1到栈幁n，直到找到递归终止的条件，然后开始汇总结果，最后出栈，返回结果，这种递归算法方式有一个弊端，就是在计算的过程中当n很大的情况下会出现栈溢出的错误（java.lang.StackOverflowError），可以使用尾递归的方式进行优化，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 使用尾递归进行计算阶乘</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> n      需要计算的n的阶乘</div><div class="line">    * <span class="doctag">@param</span> result 返回n的阶乘结果  如： 传递3  则计算 1 * 2 *3 = 6</div><div class="line">    *               计算过程如下： tailFactorial(3,1)</div><div class="line">    *               = tailFactorial(2,3*1)</div><div class="line">    *               = tailFactorial(1,2*3*1)</div><div class="line">    *               = tailFactorial(1,6)</div><div class="line">    *               = 6</div><div class="line">    *               揭秘：只使用一个栈幁就可以搞定计算</div><div class="line">    * <span class="doctag">@return</span> 返回n的阶乘</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tailFactorial</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> result)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">           <span class="keyword">return</span> result;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">return</span> tailFactorial(n - <span class="number">1</span>, n * result);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>计算a,b（a,b为非负整数）的最大公约数？<br>此题目可以使用欧几里得算法进行解答，实现代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 欧几里得算法计算两个数的最大公约数</div><div class="line">     * <span class="doctag">@param</span> p 需要计算的数a</div><div class="line">     * <span class="doctag">@param</span> q 需要计算的数b</div><div class="line">     * <span class="doctag">@return</span> 返回a，b的最大公约数  a,b 是大于0 的正整数</div><div class="line">     * 算法描述： 计算两个非负整数的最大公约数： 若q是0，则最大公约数为p。否则，将p除以q得到余数r，p和q的最大公约数则为q和r的最大公约数</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">greatestCommonDivisors</span><span class="params">(<span class="keyword">int</span> p , <span class="keyword">int</span> q)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(q==<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> r = p % q;</div><div class="line">        <span class="keyword">return</span> greatestCommonDivisors(q,r);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>最后我们开始使用递归遍历某个目录下的所有子目录和文件进行加深理解和运用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDirectoriesAndFilesByPath</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            File file = <span class="keyword">new</span> File(path);</div><div class="line">            <span class="keyword">if</span> (file.exists()) &#123;</div><div class="line">                File[] files = file.listFiles();</div><div class="line">                <span class="keyword">for</span> (File f :</div><div class="line">                        files) &#123;</div><div class="line">                    <span class="keyword">if</span> (f.isDirectory() &amp;&amp; f.listFiles().length &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (f.isDirectory()) &#123;</div><div class="line">                            String directory = f.getAbsolutePath();</div><div class="line">                            System.out.println(<span class="string">"-------目录名称:"</span> + f.getAbsolutePath());</div><div class="line">                            printDirectoriesAndFilesByPath(directory);</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        System.out.println(<span class="string">"-------目录名称:"</span>+f.getParent()+<span class="string">"---&gt;文件名称："</span> + f.getAbsolutePath());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"对不起，文件路径不存在"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;首先使用递归输出经典的阶乘，描述如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;1! =1&lt;/li&gt;
&lt;li&gt;2! = 2&lt;/li&gt;
&lt;li&gt;3! = 6&lt;br&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来使用常规的递归方式实现（Java），则可以得到以下程序：&lt;br
    
    </summary>
    
      <category term="DataStructureAndAlgorithm" scheme="http://baiwenhui.com/categories/DataStructureAndAlgorithm/"/>
    
    
      <category term="DataStructureAndAlgorithm" scheme="http://baiwenhui.com/tags/DataStructureAndAlgorithm/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习一</title>
    <link href="http://baiwenhui.com/2017/03/12/SpringBoot%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://baiwenhui.com/2017/03/12/SpringBoot学习一/</id>
    <published>2017-03-12T15:42:17.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><blockquote>
<p>Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.</p>
</blockquote>
<p><strong>遵循建立生产就绪Spring应用程序的观点。SpringBoot支持约定优于配置的惯例，旨在让您尽快启动和运行。</strong></p>
<blockquote>
<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”. We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.</p>
</blockquote>
<p><strong>SpringBoot可以轻松的创建单独的，生产级的基于Spring的应用，您可以“直接运行”。我们为Spring平台和第三方库提供了开箱即用的设置，这样你就可以有条不斋的开始。大多数的SpringBoot程序只需要很少的Spring配置。 </strong></p>
<h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul>
<li>Create stand-alone Spring applications</li>
<li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</li>
<li>Provide opinionated ‘starter’ POMs to simplify your Maven configuration</li>
<li>Automatically configure Spring whenever possible</li>
<li>Provide production-ready features such as metrics, health checks and externalized configuration</li>
<li>Absolutely no code generation and no requirement for XML configuration</li>
</ul>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>创建标准独立的Spring应用程序</li>
<li>直接嵌入Tomcat、Jetty或者Undertow（不需要部署WAR文件）</li>
<li>提供建议的‘starter’POM模板以简化您的Maven配置</li>
<li>每当可能时自动配置Spring</li>
<li>提供生产就绪的功能，如指标，运行状况检查和外部化配置</li>
<li>绝对没有代码生成和不需要XML配置</li>
</ul>
<p>The reference guide includes detailed descriptions of all the features, plus an extensive howto for common use cases.<br>该<a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle" target="_blank" rel="external">参考指南</a>包含所有功能的详细说明，以及广泛的<a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#howto" target="_blank" rel="external">如何使用</a>共同使用情况。</p>
<h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><p>If you are Java developer you can use start.spring.io to generate a basic project, follow the “Quick Start” example below, or read the reference documentation getting started guide.</p>
<h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>如果你是一名Java程序员，你可以通过<a href="https://start.spring.io/" target="_blank" rel="external">start.spring.io</a>生成基本项目，按照下面的“快速开始”示例或者阅读参考文档的<a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started" target="_blank" rel="external">入门指南</a>。</p>
<p>The recommended way to get started using spring-boot in your project is with a dependency management system – the snippet below can be copied and pasted into your build. Need help? See our getting started guides on building with Maven and Gradle.</p>
<p>spring-boot在项目中开始使用的推荐方法是使用依赖关系管理系统 - 下面的代码段可以复制并粘贴到您的构建中。需要帮忙？请参阅我们使用<a href="https://spring.io/guides/gs/maven/" target="_blank" rel="external">Maven</a>和 <a href="https://spring.io/guides/gs/gradle/" target="_blank" rel="external">Gradle</a>构建的入门指南。</p>
<p>Maven<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;parent&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.5.1.RELEASE&lt;/version&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure></p>
<p>Gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile(&quot;org.springframework.boot:spring-boot-starter-web:1.5.1.RELEASE&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello/SampleController.java</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package hello;</div><div class="line"></div><div class="line">import org.springframework.boot.*;</div><div class="line">import org.springframework.boot.autoconfigure.*;</div><div class="line">import org.springframework.stereotype.*;</div><div class="line">import org.springframework.web.bind.annotation.*;</div><div class="line"></div><div class="line">@Controller</div><div class="line">@EnableAutoConfiguration</div><div class="line">public class SampleController &#123;</div><div class="line"></div><div class="line">    @RequestMapping(&quot;/&quot;)</div><div class="line">    @ResponseBody</div><div class="line">    String home() &#123;</div><div class="line">        return &quot;Hello World!&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        SpringApplication.run(SampleController.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Spring-Boot-CLI"><a href="#Spring-Boot-CLI" class="headerlink" title="Spring Boot CLI"></a>Spring Boot CLI</h3><p>Spring Boot ships with a command line tool that can be used if you want to quickly prototype with Spring. It allows you to run Groovy scripts, which means that you have a familiar Java-like syntax, without so much boilerplate code. Follow the instructions in our main documentation if you want to install the Spring Boot CLI.</p>
<h3 id="Spring-Boot-命令行工具"><a href="#Spring-Boot-命令行工具" class="headerlink" title="Spring Boot 命令行工具"></a>Spring Boot 命令行工具</h3><p>Spring Boot附带一个命令行工具，如果你想快速使用Spring原型，可以使用它。它允许你运行Groovy脚本，这意味着你有一个熟悉的类似Java的语法，没有那么多的样板代码。如果要<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli" target="_blank" rel="external">安装Spring Boot CLI</a>，请按照我们的主要文档中的说明进行<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-the-cli" target="_blank" rel="external">操作</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SpringBoot&quot;&gt;&lt;a href=&quot;#SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot&quot;&gt;&lt;/a&gt;SpringBoot&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Takes an opinionated view
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://baiwenhui.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Java面试(一)</title>
    <link href="http://baiwenhui.com/2017/03/04/Java%E9%9D%A2%E8%AF%95-%E4%B8%80/"/>
    <id>http://baiwenhui.com/2017/03/04/Java面试-一/</id>
    <published>2017-03-04T16:04:28.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="抽象类和接口的区别？"><a href="#抽象类和接口的区别？" class="headerlink" title="抽象类和接口的区别？"></a>抽象类和接口的区别？</h3><ol>
<li>抽象类中可以包含抽象方法和非抽象方法，接口只能包含公开的抽象方法；</li>
<li>抽象类中的变量是各种类型的，而接口只能包含public abstract final 类型；</li>
<li>接口中不能含有静态代码块和静态方法，而抽象类中可以包含；</li>
<li>一个类只能继承一个抽象类，但是可以实现多个接口；</li>
<li>抽象类可以有构造方法，接口不能有；</li>
</ol>
<h3 id="HashMap和HashTable的区别？"><a href="#HashMap和HashTable的区别？" class="headerlink" title="HashMap和HashTable的区别？"></a>HashMap和HashTable的区别？</h3><ul>
<li>HashTable是基于陈旧的Dictionary的Map接口的实现，而HashMap是基于哈希表的Map接口的实现</li>
<li>从方法上看，HashMap去掉了HashTable的contains方法</li>
<li>HashTable是同步的（线程安全），而HashMap是线程不安全的，效率上HashMap更快</li>
<li><p>HashMap允许空键值，HashTable不允许，可以查看HashTable的实现源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">public synchronized V put(K key, V value) &#123;</div><div class="line">    // Make sure the value is not null</div><div class="line">    if (value == null) &#123;</div><div class="line">        throw new NullPointerException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Makes sure the key is not already in the hashtable.</div><div class="line">    Entry&lt;?,?&gt; tab[] = table;</div><div class="line">    int hash = key.hashCode();</div><div class="line">    int index = (hash &amp; 0x7FFFFFFF) % tab.length;</div><div class="line">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</div><div class="line">    for(; entry != null ; entry = entry.next) &#123;</div><div class="line">        if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</div><div class="line">            V old = entry.value;</div><div class="line">            entry.value = value;</div><div class="line">            return old;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    addEntry(hash, key, value, index);</div><div class="line">    return null;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>HashMap的iterator迭代器执行快速失败机制，也就是说在迭代过程中修改集合结构，除非调用迭代器自身的remove方法，否则以其他任何方式的修改都将抛出并发修改异常。而Hashtable返回的Enumeration不是快速失败的。</p>
</li>
</ul>
<h3 id="Java中如何创建一个新线程？"><a href="#Java中如何创建一个新线程？" class="headerlink" title="Java中如何创建一个新线程？"></a>Java中如何创建一个新线程？</h3><ol>
<li>实现runable接口并重写run方法；</li>
<li>继承Thread类重写run方法；</li>
<li>实现Callable接口，重写call()方法；使用FutureTask类包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值；<br>使用FutureTask对象作为Thread对象的target创建并启动线程，调用FutureTask对象的get()方法获得子线程执行结束后的返回值；</li>
</ol>
<h3 id="什么是AIDL？"><a href="#什么是AIDL？" class="headerlink" title="什么是AIDL？"></a>什么是AIDL？</h3><ul>
<li>AIDL全称Android Interface Definition Language（AndRoid接口描述语言）是一种借口描述语言;</li>
<li>编译器可以通过aidl文件生成一段代码，通过预先定义的接口达到两个进程内部通信进程跨界对象访问的目的.AIDL的IPC的机制和COM或CORBA类似, 是基于接口的，但它是轻量级的。</li>
<li>AIDL支持的数据类型有Stirng，list，map，All native java datatype</li>
</ul>
<h3 id="求计算1-2-3-4-5-6…的方法，n很大，考虑性能？"><a href="#求计算1-2-3-4-5-6…的方法，n很大，考虑性能？" class="headerlink" title="求计算1-2+3-4+5-6…的方法，n很大，考虑性能？"></a>求计算1-2+3-4+5-6…的方法，n很大，考虑性能？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public static  long fn(long n)</div><div class="line">    &#123;</div><div class="line">        if(n&lt;=0)</div><div class="line">        &#123;</div><div class="line">            //1-2+3-4+5-6   当n为负数时，结果肯定为负数,使用加法结合律得出当n为偶数时,结果为(1-2)+(3-4)...(-1)+(-1),规律</div><div class="line">            //当n为2时，结果为一个-1和，当n为4时，结果为2个-1的和,由此得出此结果的规律为(-1)*(n/2)</div><div class="line"></div><div class="line">            //当n为奇数的时候，当n为1时，结果为1，当n为3时候,结果为2,当n为5时候,结果为3...</div><div class="line">            //由此得出规律应该为：(-1)*(n/2)+n =-n/2+n   或者 (n+1)/2</div><div class="line">            //&gt;&gt;(右移)</div><div class="line">            //操作数每右移一位，相当于该数除以2</div><div class="line"></div><div class="line">            System.out.println(&quot;error&quot;);</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">        if(0==n%2)</div><div class="line">            return (n&gt;&gt;1)*(-1);</div><div class="line">        else&#123;</div><div class="line">            System.out.println(&quot;aaa&quot;);</div><div class="line">            return (n&gt;&gt;1)*(-1)+n;   //或者可以替换为(n+1)&gt;&gt;1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="char类型的取值范围："><a href="#char类型的取值范围：" class="headerlink" title="char类型的取值范围："></a>char类型的取值范围：</h3><p>0-2<sup>16</sup>-1</p>
<h3 id="Java中如何在线程中返回一个值？"><a href="#Java中如何在线程中返回一个值？" class="headerlink" title="Java中如何在线程中返回一个值？"></a>Java中如何在线程中返回一个值？</h3><p>答案：可以让这个类去实现Callable接口，然后定义私有变量进行传递即可：如，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.pff;</div><div class="line"></div><div class="line">import java.util.concurrent.Callable;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by strongant on 16-6-16.</div><div class="line"> */</div><div class="line">public class MutiThread implements Callable&lt;String&gt; &#123;</div><div class="line">    private String str;</div><div class="line">    private int count = 1;</div><div class="line"></div><div class="line">    public MutiThread(String str) &#123;</div><div class="line">        this.str = str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //需要实现的CallAble的Call方法</div><div class="line">    public String call() throws Exception &#123;</div><div class="line">        for (int i = 0; i &lt; this.count; i++) &#123;</div><div class="line">            System.out.println(&quot;Callable的call()方法打印:&quot; + this.str + &quot; &quot; + i);</div><div class="line">        &#125;</div><div class="line">        return this.str;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.pff;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.concurrent.ExecutorService;</div><div class="line">import java.util.concurrent.Executors;</div><div class="line">import java.util.concurrent.Future;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by strongant on 16-6-16.</div><div class="line"> */</div><div class="line">public class CallableTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        //创建一个线程池</div><div class="line">        ExecutorService exs = Executors.newCachedThreadPool();</div><div class="line">        ArrayList&lt;Future&lt;String&gt;&gt; al = new ArrayList&lt;&gt;();</div><div class="line">        al.add(exs.submit(new MutiThread(&quot;String0&quot;)));</div><div class="line">        for (Future&lt;String&gt; fs : al) &#123;</div><div class="line">            try &#123;</div><div class="line">                System.out.println(fs.get());</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        exs.shutdown();</div><div class="line">        /*第二种方式，使用FutureTask来接收线程的返回值</div><div class="line">        MutiThread task = new MutiThread(&quot;test&quot;);</div><div class="line">        FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(task);</div><div class="line">        Thread thread = new Thread(futureTask);</div><div class="line">        thread.start();</div><div class="line">        */</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>具体流程就是实现Callable<object>  泛型接口，然后线程类定义私有变量，重写call()方法，并且返回Callable接口声明的泛型类型值即可；</object></p>
<p>获取的时候使用Future<object>泛型类去使用Future类的get()方法就可以获取到；</object></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h2&gt;&lt;h3 id=&quot;抽象类和接口的区别？&quot;&gt;&lt;a href=&quot;#抽象类和接口的区别？&quot; class=&quot;headerli
    
    </summary>
    
    
      <category term="Java面试" scheme="http://baiwenhui.com/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2017开工快乐</title>
    <link href="http://baiwenhui.com/2017/02/05/2017%E5%BC%80%E5%B7%A5%E5%BF%AB%E4%B9%90/"/>
    <id>http://baiwenhui.com/2017/02/05/2017开工快乐/</id>
    <published>2017-02-05T13:43:05.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<center><img src="http://i1.piimg.com/4851/ce0a3e1ef63844b1.jpg" alt="2017开工快乐"></center>

<p>春节已经结束了，祝愿大家在新的一年多挣钱！在这里给大家分享一份简历模板：<br><a href="http://resume.f-tm.net/" target="_blank" rel="external">http://resume.f-tm.net/</a></p>
<p>简历开源地址:<br><a href="https://github.com/googlerobot/resume" target="_blank" rel="external">https://github.com/googlerobot/resume</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://i1.piimg.com/4851/ce0a3e1ef63844b1.jpg&quot; alt=&quot;2017开工快乐&quot;&gt;&lt;/center&gt;

&lt;p&gt;春节已经结束了，祝愿大家在新的一年多挣钱！在这里给大家分享一份简历模板：&lt;br&gt;&lt;a hre
    
    </summary>
    
    
      <category term="随笔" scheme="http://baiwenhui.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>春节回家</title>
    <link href="http://baiwenhui.com/2017/01/23/%E6%98%A5%E8%8A%82%E5%9B%9E%E5%AE%B6/"/>
    <id>http://baiwenhui.com/2017/01/23/春节回家/</id>
    <published>2017-01-23T13:20:53.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<center><img src="http://i1.piimg.com/4851/b70e6f5b8f4e2ba5.jpg" alt="plane"></center>


<p><strong>对于刚过去不远的2016年，有欢乐，有辛酸，有失望，有快乐！还记得自己2016年年初的时候计划通过自己的努力买一台MakBook Pro（非正式工资的钱买），可到头来并没有完成我的这个愿望！</strong></p>
<p><strong>远在他乡的我，随着年龄的增长，感到些许压抑、彷徨和不安，在新的2017年我决定奋力冲刺，早日实现自己的梦想！</strong></p>
<p><strong>远在他乡，来到陌生的城市，看着天天上涨的房价，买房这件事情也只能想想。自己长大了，父母却老了，他们需要我们的照顾，在一线城市上几年班，攒个首付去二三线城市买一套房子然后打拼事业，这也是我的打算！乘着二三线城市的房价还没有大幅上涨，还是早下手为强！</strong></p>
<p><strong>在一线城市上班，别人听起来工资很高，经常听到隔壁阿姨说：谁谁家的儿子在哪哪呢，一个月挣1W多呢，可是花销完，房租缴完，也剩不下多少钱了。要想拿到更多的薪水，就得从自身开始做起。我已经为自己制定好了2017年的计划，你呢？</strong></p>
<p><strong>在这里，提前祝大家新年快乐！以上是我的一点生活感触，博客地址：<a href="http://baiwenhui.com">http://baiwenhui.com</a>，欢迎交流、分享：</strong></p>
<center> <img src="http://i1.piimg.com/4851/71f2c239602d5025.jpg" alt="qrcode"></center>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://i1.piimg.com/4851/b70e6f5b8f4e2ba5.jpg&quot; alt=&quot;plane&quot;&gt;&lt;/center&gt;


&lt;p&gt;&lt;strong&gt;对于刚过去不远的2016年，有欢乐，有辛酸，有失望，有快乐！还记得自己2016年
    
    </summary>
    
    
      <category term="生活感悟" scheme="http://baiwenhui.com/tags/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>rxjs翻译-rxjs介绍</title>
    <link href="http://baiwenhui.com/2017/01/22/rxjs%E7%BF%BB%E8%AF%91-rxjs%E4%BB%8B%E7%BB%8D/"/>
    <id>http://baiwenhui.com/2017/01/22/rxjs翻译-rxjs介绍/</id>
    <published>2017-01-22T13:26:40.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>RxJS是一个基于可观察对象(Observable)序列，用于异步或者事件编程的库。它提供一个核心类型，<a href="&#39;./overview.html#observable&#39;">Observable</a> ，几个卫星类型（Observer, Schedulers, Subjects）以及一些由<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.6" target="_blank" rel="external">Array#extras</a> (map, filter, reduce, every等)激发的，让异步事件可以以集合的方式被处理的运算子(Operators)。</p>
<p><span class="informal">可以将RxJS想象成是用于处理事件的Lodash.</span></p>
<p>ReactiveX将<a href="https://en.wikipedia.org/wiki/Observer_pattern" target="_blank" rel="external">Observer模式</a>和<a href="https://en.wikipedia.org/wiki/Iterator_pattern" target="_blank" rel="external">Iterator模式</a>和对集合进行函数式编程结合起来，从而满足了对事件序列进行管理的需求。</p>
<p>RxJS用于解决异步事件的管理问题，它的核心概念如下：</p>
<ul>
<li><strong>Observable:</strong> 代表数据与事件的集合，这个集合可以被调用，从而可以生成数据和事件。</li>
<li><strong>Observer:</strong> 回调函数的集合，用于获取想要数据。这些数据来自于Observable。</li>
<li><strong>Subscription:</strong> 用于表示Observable的执行状态，主要用于执行的取消。</li>
<li><strong>Operator:</strong> 函数式风格的纯函数，通过<code>map</code>, <code>filter</code>, <code>concat</code>, <code>flatMap</code>等操作对集合进行处理。</li>
<li><strong>Subject:</strong> 与EventEmitter等价，唯一可以将一个值或者事件向个多个Observer进行广播的办法。</li>
<li><strong>Schedulers:</strong> 一个中心化的、控制并发的分发器，允许我们可以在象<code>setTimeout</code>、<code>requestAnimationFrame</code>或者其它类似的计算中可以进行调整。</li>
</ul>
<h2 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h2><p>通常你是这样注册事件的侦听器(listener)的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</div><div class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Clicked!'</span>));</div></pre></td></tr></table></figure></p>
<p>使用RxJS的话，你要创建一个Observable来替换。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</div><div class="line">Rx.Observable.fromEvent(button, <span class="string">'click'</span>)</div><div class="line">  .subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Clicked!'</span>));</div></pre></td></tr></table></figure>
<h3 id="纯粹-Purity"><a href="#纯粹-Purity" class="headerlink" title="纯粹(Purity)"></a>纯粹(Purity)</h3><p>让RxJS强大的是它能完全通过函数来生成数值，这也就意味着可以减少代码出错的机会。</p>
<p>通常你会创建比较不纯粹的函数，在这样的函数里，其它的代码片段会让你的状态变的混乱。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</div><div class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">`Clicked <span class="subst">$&#123;++count&#125;</span> times`</span>));</div></pre></td></tr></table></figure>
<p>而使用RxJS可以将你的状态进行隔离。</p>
<blockquote>
<p>译者注： 指count不再需要定义在外面。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</div><div class="line">Rx.Observable.fromEvent(button, <span class="string">'click'</span>)</div><div class="line">  .scan(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>, <span class="number">0</span>)</div><div class="line">  .subscribe(<span class="function"><span class="params">count</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Clicked <span class="subst">$&#123;count&#125;</span> times`</span>));</div></pre></td></tr></table></figure>
<p>这里<strong>scan</strong>运算子的工作方式与<strong>reduce</strong>在数组里的工作方式是一样的。它从传给回调函数的值中获取值。返回的值将会作为下一次的传入值。</p>
<blockquote>
<p>译者注：scan第二个参数0是初始值。对于上面的函数来说就可以用来侦听被点击的次数了，非常的方便。</p>
</blockquote>
<h3 id="流转（Flow）"><a href="#流转（Flow）" class="headerlink" title="流转（Flow）"></a>流转（Flow）</h3><p>RxJS有一堆的运算子可以帮助你控制事件如何在你的可观察对象里流转。</p>
<p>下面是你在纯JavaScript下允许一分钟最多一次点击的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> rate = <span class="number">1000</span>;</div><div class="line"><span class="keyword">var</span> lastClick = <span class="built_in">Date</span>.now() - rate;</div><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</div><div class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - lastClick &gt;= rate) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Clicked <span class="subst">$&#123;++count&#125;</span> times`</span>);</div><div class="line">    lastClick = <span class="built_in">Date</span>.now();</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用RxJS后:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</div><div class="line">Rx.Observable.fromEvent(button, <span class="string">'click'</span>)</div><div class="line">  .throttleTime(<span class="number">1000</span>)</div><div class="line">  .scan(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>, <span class="number">0</span>)</div><div class="line">  .subscribe(<span class="function"><span class="params">count</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Clicked <span class="subst">$&#123;count&#125;</span> times`</span>));</div></pre></td></tr></table></figure>
<p>其实的流转控制运算子还有<a href="../class/es6/Observable.js~Observable.html#instance-method-filter"><strong>filter</strong></a>, <a href="../class/es6/Observable.js~Observable.html#instance-method-delay"><strong>delay</strong></a>, <a href="../class/es6/Observable.js~Observable.html#instance-method-debounceTime"><strong>debounceTime</strong></a>, <a href="../class/es6/Observable.js~Observable.html#instance-method-take"><strong>take</strong></a>, <a href="../class/es6/Observable.js~Observable.html#instance-method-takeUntil"><strong>takeUntil</strong></a>, <a href="../class/es6/Observable.js~Observable.html#instance-method-distinct"><strong>distinct</strong></a>, <a href="../class/es6/Observable.js~Observable.html#instance-method-distinctUntilChanged"><strong>distinctUntilChanged</strong></a>等。</p>
<h3 id="值-Values"><a href="#值-Values" class="headerlink" title="值(Values)"></a>值(Values)</h3><p>你可以转化赋给你的观察者的值。</p>
<p>下面是你在纯JavaScript下添加当前鼠标的每个点击事件的x轴位置的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> rate = <span class="number">1000</span>;</div><div class="line"><span class="keyword">var</span> lastClick = <span class="built_in">Date</span>.now() - rate;</div><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</div><div class="line">button.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - lastClick &gt;= rate) &#123;</div><div class="line">    count += event.clientX;</div><div class="line">    <span class="built_in">console</span>.log(count)</div><div class="line">    lastClick = <span class="built_in">Date</span>.now();</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用RxJS后:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</div><div class="line">Rx.Observable.fromEvent(button, <span class="string">'click'</span>)</div><div class="line">  .throttleTime(<span class="number">1000</span>)</div><div class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.clientX)</div><div class="line">  .scan(<span class="function">(<span class="params">count, clientX</span>) =&gt;</span> count + clientX, <span class="number">0</span>)</div><div class="line">  .subscribe(<span class="function"><span class="params">count</span> =&gt;</span> <span class="built_in">console</span>.log(count));</div></pre></td></tr></table></figure>
<p>另外几个用于生成值的运算子有<a href="../class/es6/Observable.js~Observable.html#instance-method-pluck"><strong>pluck</strong></a>, <a href="../class/es6/Observable.js~Observable.html#instance-method-pairwise"><strong>pairwise</strong></a>,<br><a href="../class/es6/Observable.js~Observable.html#instance-method-sample"><strong>sample</strong></a>等。</p>
<blockquote>
<p>译者注：这里map可以将事件里的值取出来，如果不进行map，clientX里的值就是事件本身。<br>这里要注意的是每次变换，其实对象是发生变化的。subscribe一次之后就不能再subscribe了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;RxJS是一个基于可观察对象(Observable)序列，用于异步或者事件编程的库。它提供一个核心类型，&lt;a href=&quot;&amp;#39;./ov
    
    </summary>
    
    
      <category term="rxjs" scheme="http://baiwenhui.com/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>修正browser-sync公众号文章的错误</title>
    <link href="http://baiwenhui.com/2017/01/21/%E4%BF%AE%E6%AD%A3browser-sync%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://baiwenhui.com/2017/01/21/修正browser-sync公众号文章的错误/</id>
    <published>2017-01-21T14:30:29.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<p>首先说说声对不起，在上一篇的公众号文章：《放弃F5，拥抱browser-sync》中存在几个错误点。链接地址:</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z</a></p>
<p>几个错误点修改如下：</p>
<ol>
<li>文章中的：<br><em>……更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试…</em><br>将“进项调试”修改为“进行调试”<br>2.　最后的代码有一个目录错误，因为我的粗心，给大家带来的不变，请见谅！在以后的文章中我会更加小心<br>发表文章，力求保证没有错误！<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var gulp        = require(&apos;gulp&apos;);</div><div class="line">var browserSync = require(&apos;browser-sync&apos;).create();</div><div class="line">var browserify = require(&apos;gulp-browserify&apos;);</div><div class="line">var sass        = require(&apos;gulp-sass&apos;);</div><div class="line">var uglify = require(&apos;gulp-uglify&apos;);</div><div class="line">// Compile sass into CSS &amp; auto-inject into browsers</div><div class="line">gulp.task(&apos;sass&apos;, function() &#123;</div><div class="line">    return gulp.src(&quot;app/scss/*.scss&quot;)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(&quot;dist/css&quot;))</div><div class="line">        .pipe(browserSync.stream());</div><div class="line">&#125;);</div><div class="line">// process JS files and return the stream.</div><div class="line">gulp.task(&apos;js&apos;, function () &#123;</div><div class="line">    return gulp.src(&apos;app/js/*.js&apos;)</div><div class="line">        .pipe(browserify())</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(&apos;dist/js&apos;));</div><div class="line">&#125;);</div><div class="line">// Static Server + watching scss/js/html files</div><div class="line">gulp.task(&apos;serve&apos;, [&apos;sass&apos;,&apos;js&apos;], function() &#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">        server: &quot;./app&quot;</div><div class="line">    &#125;);</div><div class="line">    gulp.watch(&quot;app/scss/*.scss&quot;, [&apos;sass&apos;]);</div><div class="line">        gulp.watch(&quot;app/js/*.js&quot;, [&apos;js&apos;]);</div><div class="line">    gulp.watch(&quot;app/*.html&quot;).on(&apos;change&apos;, browserSync.reload);</div><div class="line">&#125;);</div><div class="line">gulp.task(&apos;default&apos;, [&apos;serve&apos;]);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var gulp        = require(&apos;gulp&apos;);</div><div class="line">var browserSync = require(&apos;browser-sync&apos;).create();</div><div class="line">var browserify = require(&apos;gulp-browserify&apos;);</div><div class="line">var sass        = require(&apos;gulp-sass&apos;);</div><div class="line">var uglify = require(&apos;gulp-uglify&apos;);</div><div class="line">// Compile sass into CSS &amp; auto-inject into browsers</div><div class="line">gulp.task(&apos;sass&apos;, function() &#123;</div><div class="line">    return gulp.src(&quot;app/scss/*.scss&quot;)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(&quot;.app/dist/css&quot;))</div><div class="line">        .pipe(browserSync.stream());</div><div class="line">&#125;);</div><div class="line">// process JS files and return the stream.</div><div class="line">gulp.task(&apos;js&apos;, function () &#123;</div><div class="line">    return gulp.src(&apos;app/js/*.js&apos;)</div><div class="line">        .pipe(browserify())</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(&apos;.app/dist/js&apos;));</div><div class="line">&#125;);</div><div class="line">// Static Server + watching scss/js/html files</div><div class="line">gulp.task(&apos;serve&apos;, [&apos;sass&apos;,&apos;js&apos;], function() &#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">        server: &quot;./app&quot;</div><div class="line">    &#125;);</div><div class="line">    gulp.watch(&quot;app/scss/*.scss&quot;, [&apos;sass&apos;]);</div><div class="line">        gulp.watch(&quot;app/js/*.js&quot;, [&apos;js&apos;]);</div><div class="line">    gulp.watch(&quot;app/*.html&quot;).on(&apos;change&apos;, browserSync.reload);</div><div class="line">&#125;);</div><div class="line">gulp.task(&apos;default&apos;, [&apos;serve&apos;]);</div></pre></td></tr></table></figure></p>
<p>参照对比原文地址：</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;mid=2247483709&amp;idx=1&amp;sn=9939c3029c12ef1f716111cd0c9e9ffc&amp;chksm=9b4b2ba3ac3ca2b5dea5496d6f9d87d7a0218ed85e4f807d4da2374957dd1b64cea234d5074c&amp;mpshare=1&amp;scene=1&amp;srcid=0228DCwqHbO5bJNRzdNcoQaJ&amp;key=1ffbac7579ea006ba638f1c527ceb6fccc5cd60675bb72cb4ac4e1669f8844ac48f5c811613c0700f5b5a5d0758631cddccd09a62852836bbe7ea0a2f3b6519205a05d50a53e595fa3c414a39a8f507f&amp;ascene=0&amp;uin=MTkwMTU1MzgyMw%3D%3D&amp;devicetype=iMac+Macmini7%2C1+OSX+OSX+10.12.3+build(16D32)&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=iTAw5XKKAiEh5rRG8zKg5HPSatL3GYf2%2FVDBxyBOTnbVmCeOf%2FgW%2FmhS5DctS64z</a></p>
<p>目前内容已经修改！欢迎反馈，欢迎交流：</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_png/bLPd4tHRLu6MfYBKkZ6Rkk5E2H92YaZN1JO92ub5SEVFEPxCHY8PCRHTLUHXiaghl4p7hRnxT8yySSdl7ZV7epA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="strongant公众号二维码"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说说声对不起，在上一篇的公众号文章：《放弃F5，拥抱browser-sync》中存在几个错误点。链接地址:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;amp;mid=2247483
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo搭建成功</title>
    <link href="http://baiwenhui.com/2017/01/19/hexo%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F/"/>
    <id>http://baiwenhui.com/2017/01/19/hexo搭建成功/</id>
    <published>2017-01-19T15:20:52.000Z</published>
    <updated>2017-08-12T03:51:12.642Z</updated>
    
    <content type="html"><![CDATA[<p>终于折腾完了，搭建好我的hexo，的确挺方便的！感谢前人的贡献！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于折腾完了，搭建好我的hexo，的确挺方便的！感谢前人的贡献！&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
