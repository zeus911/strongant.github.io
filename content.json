[{"title":"","date":"2017-02-12T05:50:16.768Z","path":"2017/02/12/白文辉-应聘Java开发工程师/","text":"联系方式 手机：18215361994 Email：strongant1994@gmail.com QQ/微信号：877798942/18215361994 个人信息 白文辉/男/1994 专科/兰州大学网络教育计算机技术与应用 工作年限：2年半 技术博客：strongant.github.io Github：https://github.com/strongant 期望职位：Java程序员 期望薪资：税后月薪14k~18k 期望城市：上海 工作经历上海浦东软件园信息技术股份有限公司 （ 2015年6月 ~ 2017年2月 ）一起吐槽吧Chrome扩展我在此项目主要负责谷歌chrome扩展的开发、Landing页面的展示、通过微信扫码上传图片的功能，该扩展主要的作用是提供一个为网上购物用户的吐槽发泄第三方平台。分别在采集网页信息和截图以及页面录像方面做得比较出色，这个项目中，我最困难的问题是对chrome浏览器打开的tab页进行录像功能的实现，我刚开始拿到这个需求的时候不知道如何下手，通过寻找相关的开源项目和参考谷歌chrome浏览器扩展开发手册，一步一步自己摸索完成了此功能，最后用户可以点击按钮对标签页进行录像。这个项目中，我最自豪的技术细节是学会并掌握了使用Node+Angular等前端相关技术栈对扩展的开发，通过自己的努力在2016年末完成了计划的原型版本，领导对此工作比较赞赏。项目Landing页介绍：http://www.17tc8.com/chrome扩展商店内测版本下载地址:https://chrome.google.com/webstore/detail/17tc8/oednfimipmoahpmmhglgaepjanilbnhi 浦软翔鹰电子数据取证软件我在此项目负责了案件分析(线索、过滤、邮件分析)、U盘管理、案件管理模块的开发，分别在案件搜索部分做得出色，主要完成了对采集的信息进行全文检索和匹配，关键词高亮显示，并对搜索的结果进行分组，这个项目中，我最困难的问题是对于Elasticsearch了解不是很深入，在进行全文搜索匹配的过程中，由于滥用搜索关键词，导致查询速度慢，用户等待时间长，我采取了使用正确的方式对个别字段的检索，最后改善了查询慢、用户等待搜索结果时间长的问题。这个项目中，我最自豪的技术细节是学习了开源的全文搜索技术-Elasticsearch，了解了全文搜索方面的相关知识，它可以帮助我在以后做类似的项目中有充分的把握，通过不断对按键搜索的优化，同事对我的解决问题的能力也比较认可，领导也很满意。 上海市工商亮照巡检平台我在此项目属于独立开发，该项目主要完成的功能是由上海市工商局提供批量的网站域名，检测网站首页是否包含工商亮照标识，通过爬虫进行检测并将部分信息进行整理入库，我分别在数据抓取和数据处理方面做得比较出色，通过此项目的开发，让我对Python技术栈有了深入的了解和应用，这个项目中，我最困难的问题是数据的抓取部分，由于目前大多数网站都使用了ajax技术，导致传统的抓取不能获取到网站渲染后的完整信息，我参考公司之前使用的Phantomjs技术进行了抓取网站信息，最后解决了大部分网站信息不能完整抓取的问题。这个项目中，我最自豪的技术细节是能够使用无头的js浏览器引擎-Phantomjs爬取网站的完整信息，对爬虫方面的知识有了更深一步的认知，通过此项目的开发，解决了之前抓取信息不完整的信息，获得了领导的认可，提升了自己的技术广度。 其他项目Linux/Unix系统下硬盘克隆桌面系统，使用技术栈Node+Electron+Angular+Gulp技术栈。此项目地址:https://github.com/strongant/diskclone 兰州中林智能科技有限公司 （ 2014年10月 ~ 2015年6月 ）甘肃省兰州市交警支队短信告知系统我在此项目主要负责前后端的开发，分别在短信群发方面做得比较好，这个项目中，我最困难的问题是由于使用了第三方短信下发平台的接口，某些短信由于信号或者关机的原因不能及时送达违法信息到达驾驶人的手机中，我采取了最多3次的补发重试机制和校验核对，确保短信能尽可能的下发到驾驶人员的手机短信中，最后通过我的这个方案，可以解决大多数由于第三方短信下发平台的接口不稳定和信号差原因不能发送短信成功的问题。这个项目中，我最自豪的技术细节是使用了Java中的webservice对驾驶员下发违法告知短信，之前没有做过类似的需求，通过对项目的完善和优化，短信的发送的成功率得到了保障，收到了领导的奖励和认可。 甘肃、青海触摸屏查询系统我在此项目主要负责前后端的开发，分别在处理违法信息的展示和处理第三方项目数据方面做得比较好，这个项目中，我最困难的问题是对老系统的Flash进行改造，我采取了废弃Flash展示信息的方式，采用HTML方式进行展现，将很多老项目中不用的东西进行了替代，最后项目比之前的老系统更轻和使用了较新的技术。这个项目中，我最自豪的技术是使用了Spring、SpringMVC、Mybatis、jQuery、EasyUI独立完成了前后端的功能，将之前项目使用的Struts1和Struts2技术进行了替换，使用了新的技术，提高了自己的做事能力，对公司使用的技术栈进行了建议。领导对我的表现比较满意和看重！ 其他项目由于这家公司主要接触的是甘肃交通和车管所相关的项目，期间对一些老系统进行了维护和升级！ 开源项目和作品开源项目 桌面硬盘克隆工具：主要用于读取指定Linux系统下的某个盘，对整个磁盘文件进行拷贝工作 技术文章 rxjs安装 rxjs观察者 rxjs订阅 技能清单以下均为我熟练使用的技能 Web开发：Java/Python/Node/JS Web框架：Spring/SpringMVC/MyBatis/Struts2/Hibernate/Flask 前端框架：Bootstrap/AngularJS/HTML5/Materialize/Electron/EasyUI 前端工具：Bower/Gulp/Grunt 数据库相关：MySQL/PgSQL/SQLite/Oracle 版本管理、文档和自动化部署工具：Svn/Git 单元测试：Junit/mocha/jasmine 云和开放平台：中国电信OOS","tags":[]},{"title":"2017开工快乐","date":"2017-02-05T13:43:05.000Z","path":"2017/02/05/2017开工快乐/","text":"春节已经结束了，祝愿大家在新的一年多挣钱！在这里给大家分享一份简历模板：http://resume.f-tm.net/ 简历开源地址:https://github.com/googlerobot/resume","tags":[{"name":"随笔","slug":"随笔","permalink":"http://baiwenhui.com/tags/随笔/"}]},{"title":"春节回家","date":"2017-01-23T13:20:53.000Z","path":"2017/01/23/春节回家/","text":"对于刚过去不远的2016年，有欢乐，有辛酸，有失望，有快乐！还记得自己2016年年初的时候计划通过自己的努力买一台MakBook Pro（非正式工资的钱买），可到头来并没有完成我的这个愿望！ 远在他乡的我，随着年龄的增长，感到些许压抑、彷徨和不安，在新的2017年我决定奋力冲刺，早日实现自己的梦想！ 远在他乡，来到陌生的城市，看着天天上涨的房价，买房这件事情也只能想想。自己长大了，父母却老了，他们需要我们的照顾，在一线城市上几年班，攒个首付去二三线城市买一套房子然后打拼事业，这也是我的打算！乘着二三线城市的房价还没有大幅上涨，还是早下手为强！ 在一线城市上班，别人听起来工资很高，经常听到隔壁阿姨说：谁谁家的儿子在哪哪呢，一个月挣1W多呢，可是花销完，房租缴完，也剩不下多少钱了。要想拿到更多的薪水，就得从自身开始做起。我已经为自己制定好了2017年的计划，你呢？ 在这里，提前祝大家新年快乐！以上是我的一点生活感触，博客地址：http://baiwenhui.com，欢迎交流、分享：","tags":[{"name":"生活感悟","slug":"生活感悟","permalink":"http://baiwenhui.com/tags/生活感悟/"}]},{"title":"rxjs翻译-rxjs介绍","date":"2017-01-22T13:26:40.000Z","path":"2017/01/22/rxjs翻译-rxjs介绍/","text":"介绍RxJS是一个基于可观察对象(Observable)序列，用于异步或者事件编程的库。它提供一个核心类型，Observable ，几个卫星类型（Observer, Schedulers, Subjects）以及一些由Array#extras (map, filter, reduce, every等)激发的，让异步事件可以以集合的方式被处理的运算子(Operators)。 可以将RxJS想象成是用于处理事件的Lodash. ReactiveX将Observer模式和Iterator模式和对集合进行函数式编程结合起来，从而满足了对事件序列进行管理的需求。 RxJS用于解决异步事件的管理问题，它的核心概念如下： Observable: 代表数据与事件的集合，这个集合可以被调用，从而可以生成数据和事件。 Observer: 回调函数的集合，用于获取想要数据。这些数据来自于Observable。 Subscription: 用于表示Observable的执行状态，主要用于执行的取消。 Operator: 函数式风格的纯函数，通过map, filter, concat, flatMap等操作对集合进行处理。 Subject: 与EventEmitter等价，唯一可以将一个值或者事件向个多个Observer进行广播的办法。 Schedulers: 一个中心化的、控制并发的分发器，允许我们可以在象setTimeout、requestAnimationFrame或者其它类似的计算中可以进行调整。 第一个例子通常你是这样注册事件的侦听器(listener)的。12var button = document.querySelector('button');button.addEventListener('click', () =&gt; console.log('Clicked!')); 使用RxJS的话，你要创建一个Observable来替换。 123var button = document.querySelector('button');Rx.Observable.fromEvent(button, 'click') .subscribe(() =&gt; console.log('Clicked!')); 纯粹(Purity)让RxJS强大的是它能完全通过函数来生成数值，这也就意味着可以减少代码出错的机会。 通常你会创建比较不纯粹的函数，在这样的函数里，其它的代码片段会让你的状态变的混乱。 123var count = 0;var button = document.querySelector('button');button.addEventListener('click', () =&gt; console.log(`Clicked $&#123;++count&#125; times`)); 而使用RxJS可以将你的状态进行隔离。 译者注： 指count不再需要定义在外面。 1234var button = document.querySelector('button');Rx.Observable.fromEvent(button, 'click') .scan(count =&gt; count + 1, 0) .subscribe(count =&gt; console.log(`Clicked $&#123;count&#125; times`)); 这里scan运算子的工作方式与reduce在数组里的工作方式是一样的。它从传给回调函数的值中获取值。返回的值将会作为下一次的传入值。 译者注：scan第二个参数0是初始值。对于上面的函数来说就可以用来侦听被点击的次数了，非常的方便。 流转（Flow）RxJS有一堆的运算子可以帮助你控制事件如何在你的可观察对象里流转。 下面是你在纯JavaScript下允许一分钟最多一次点击的代码： 12345678910var count = 0;var rate = 1000;var lastClick = Date.now() - rate;var button = document.querySelector('button');button.addEventListener('click', () =&gt; &#123; if (Date.now() - lastClick &gt;= rate) &#123; console.log(`Clicked $&#123;++count&#125; times`); lastClick = Date.now(); &#125;&#125;); 使用RxJS后: 12345var button = document.querySelector('button');Rx.Observable.fromEvent(button, 'click') .throttleTime(1000) .scan(count =&gt; count + 1, 0) .subscribe(count =&gt; console.log(`Clicked $&#123;count&#125; times`)); 其实的流转控制运算子还有filter, delay, debounceTime, take, takeUntil, distinct, distinctUntilChanged等。 值(Values)你可以转化赋给你的观察者的值。 下面是你在纯JavaScript下添加当前鼠标的每个点击事件的x轴位置的代码： 1234567891011var count = 0;var rate = 1000;var lastClick = Date.now() - rate;var button = document.querySelector('button');button.addEventListener('click', (event) =&gt; &#123; if (Date.now() - lastClick &gt;= rate) &#123; count += event.clientX; console.log(count) lastClick = Date.now(); &#125;&#125;); 使用RxJS后: 123456var button = document.querySelector('button');Rx.Observable.fromEvent(button, 'click') .throttleTime(1000) .map(event =&gt; event.clientX) .scan((count, clientX) =&gt; count + clientX, 0) .subscribe(count =&gt; console.log(count)); 另外几个用于生成值的运算子有pluck, pairwise,sample等。 译者注：这里map可以将事件里的值取出来，如果不进行map，clientX里的值就是事件本身。这里要注意的是每次变换，其实对象是发生变化的。subscribe一次之后就不能再subscribe了。","tags":[{"name":"rxjs","slug":"rxjs","permalink":"http://baiwenhui.com/tags/rxjs/"}]},{"title":"《放弃F5，拥抱browser-sync》公众号文章错误说明","date":"2017-01-21T14:30:29.000Z","path":"2017/01/21/如何在技术上精进/","text":"首先说说声对不起，在上一篇的公众号文章：《放弃F5，拥抱browser-sync》中存在几个错误点。链接地址:http://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;tempkey=4s4RIGPKLlSI%2B%2B8VH3wx8KIrdHvnQSOEPLJ0k8joKaEA72cqJ41X6s0s0IzuDdKlkgLNIIrz1xkrL7lYcnIjCxGh6G%2BTC55MKR%2FWqW%2FbglQTt0aCB0A%2FFg4qN5SA%2B175n%2BIZz9ly%2BsRC5o4zHaD2Og%3D%3D&amp;chksm=1b4b2ba22c3ca2b41c5ffa577f24f378a13bd46665cd09a844d0b88bf733666a1900900694a8#rd，几个错误点修改如下： 文章中的：……更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试…将“进项调试”修改为“进行调试”2. 最后的代码有一个目录错误，因为我的粗心，给大家带来的不变，请见谅！在以后的文章中我会更加小心发表文章，力求保证没有错误！1234567891011121314151617181920212223242526272829var gulp = require(&apos;gulp&apos;);var browserSync = require(&apos;browser-sync&apos;).create();var browserify = require(&apos;gulp-browserify&apos;);var sass = require(&apos;gulp-sass&apos;);var uglify = require(&apos;gulp-uglify&apos;);// Compile sass into CSS &amp; auto-inject into browsersgulp.task(&apos;sass&apos;, function() &#123; return gulp.src(&quot;app/scss/*.scss&quot;) .pipe(sass()) .pipe(gulp.dest(&quot;dist/css&quot;)) .pipe(browserSync.stream());&#125;);// process JS files and return the stream.gulp.task(&apos;js&apos;, function () &#123; return gulp.src(&apos;app/js/*.js&apos;) .pipe(browserify()) .pipe(uglify()) .pipe(gulp.dest(&apos;dist/js&apos;));&#125;);// Static Server + watching scss/js/html filesgulp.task(&apos;serve&apos;, [&apos;sass&apos;,&apos;js&apos;], function() &#123; browserSync.init(&#123; server: &quot;./app&quot; &#125;); gulp.watch(&quot;app/scss/*.scss&quot;, [&apos;sass&apos;]); gulp.watch(&quot;app/js/*.js&quot;, [&apos;js&apos;]); gulp.watch(&quot;app/*.html&quot;).on(&apos;change&apos;, browserSync.reload);&#125;);gulp.task(&apos;default&apos;, [&apos;serve&apos;]); 修改为：1234567891011121314151617181920212223242526272829var gulp = require(&apos;gulp&apos;);var browserSync = require(&apos;browser-sync&apos;).create();var browserify = require(&apos;gulp-browserify&apos;);var sass = require(&apos;gulp-sass&apos;);var uglify = require(&apos;gulp-uglify&apos;);// Compile sass into CSS &amp; auto-inject into browsersgulp.task(&apos;sass&apos;, function() &#123; return gulp.src(&quot;app/scss/*.scss&quot;) .pipe(sass()) .pipe(gulp.dest(&quot;.app/dist/css&quot;)) .pipe(browserSync.stream());&#125;);// process JS files and return the stream.gulp.task(&apos;js&apos;, function () &#123; return gulp.src(&apos;app/js/*.js&apos;) .pipe(browserify()) .pipe(uglify()) .pipe(gulp.dest(&apos;.app/dist/js&apos;));&#125;);// Static Server + watching scss/js/html filesgulp.task(&apos;serve&apos;, [&apos;sass&apos;,&apos;js&apos;], function() &#123; browserSync.init(&#123; server: &quot;./app&quot; &#125;); gulp.watch(&quot;app/scss/*.scss&quot;, [&apos;sass&apos;]); gulp.watch(&quot;app/js/*.js&quot;, [&apos;js&apos;]); gulp.watch(&quot;app/*.html&quot;).on(&apos;change&apos;, browserSync.reload);&#125;);gulp.task(&apos;default&apos;, [&apos;serve&apos;]); 参照对比原文地址：http://mp.weixin.qq.com/s?__biz=MzAxMDgyOTgwOQ==&amp;tempkey=4s4RIGPKLlSI%2B%2B8VH3wx8KIrdHvnQSOEPLJ0k8joKaEA72cqJ41X6s0s0IzuDdKlkgLNIIrz1xkrL7lYcnIjCxGh6G%2BTC55MKR%2FWqW%2FbglQTt0aCB0A%2FFg4qN5SA%2B175n%2BIZz9ly%2BsRC5o4zHaD2Og%3D%3D&amp;chksm=1b4b2ba22c3ca2b41c5ffa577f24f378a13bd46665cd09a844d0b88bf733666a1900900694a8#rd 目前内容已经修改！欢迎反馈，欢迎交流：","tags":[]},{"title":"hexo搭建成功","date":"2017-01-19T15:20:52.000Z","path":"2017/01/19/hexo搭建成功/","text":"终于折腾完了，搭建好我的hexo，的确挺方便的！感谢前人的贡献！","tags":[]}]